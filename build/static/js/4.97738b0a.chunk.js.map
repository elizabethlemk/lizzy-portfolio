{"version":3,"sources":["../node_modules/semantic-ui-react/dist/es/elements/Segment/SegmentGroup.js","../node_modules/semantic-ui-react/dist/es/elements/Segment/SegmentInline.js","../node_modules/semantic-ui-react/dist/es/elements/Segment/Segment.js","../node_modules/semantic-ui-react/dist/es/collections/Grid/GridColumn.js","../node_modules/semantic-ui-react/dist/es/collections/Grid/GridRow.js","../node_modules/semantic-ui-react/dist/es/collections/Grid/Grid.js","../node_modules/semantic-ui-react/dist/es/elements/Divider/Divider.js","About.js"],"names":["SegmentGroup","props","children","className","compact","content","horizontal","piled","raised","size","stacked","classes","classnames_default","Object","classNameBuilders","rest","getUnhandledProps","ElementType","getElementType","react_default","a","createElement","extends_default","lib","isNil","handledProps","propTypes","Segment_SegmentGroup","SegmentInline","Segment_SegmentInline","Segment","attached","basic","circular","clearing","color","disabled","floated","inverted","loading","placeholder","padded","secondary","tertiary","textAlign","vertical","Group","Inline","__webpack_exports__","GridColumn","computer","largeScreen","mobile","only","stretched","tablet","verticalAlign","widescreen","width","create","factories","Grid_GridColumn","GridRow","centered","columns","divided","reversed","Grid_GridRow","Grid","celled","container","doubling","relaxed","stackable","Column","Row","Divider","fitted","hidden","section","Divider_Divider","About","id","fluid","Image","src","Header"],"mappings":"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","file":"static/js/4.97738b0a.chunk.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/extends\";\nimport _without from \"lodash/without\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly } from '../../lib';\n/**\n * A group of segments can be formatted to appear together.\n */\n\nfunction SegmentGroup(props) {\n  var children = props.children,\n      className = props.className,\n      compact = props.compact,\n      content = props.content,\n      horizontal = props.horizontal,\n      piled = props.piled,\n      raised = props.raised,\n      size = props.size,\n      stacked = props.stacked;\n  var classes = cx('ui', size, useKeyOnly(compact, 'compact'), useKeyOnly(horizontal, 'horizontal'), useKeyOnly(piled, 'piled'), useKeyOnly(raised, 'raised'), useKeyOnly(stacked, 'stacked'), 'segments', className);\n  var rest = getUnhandledProps(SegmentGroup, props);\n  var ElementType = getElementType(SegmentGroup, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nSegmentGroup.handledProps = [\"as\", \"children\", \"className\", \"compact\", \"content\", \"horizontal\", \"piled\", \"raised\", \"size\", \"stacked\"];\nSegmentGroup.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** A segment may take up only as much space as is necessary. */\n  compact: PropTypes.bool,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** Formats content to be aligned horizontally. */\n  horizontal: PropTypes.bool,\n\n  /** Formatted to look like a pile of pages. */\n  piled: PropTypes.bool,\n\n  /** A segment group may be formatted to raise above the page. */\n  raised: PropTypes.bool,\n\n  /** A segment group can have different sizes. */\n  size: PropTypes.oneOf(_without(SUI.SIZES, 'medium')),\n\n  /** Formatted to show it contains multiple pages. */\n  stacked: PropTypes.bool\n} : {};\nexport default SegmentGroup;","import _extends from \"@babel/runtime/helpers/extends\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps } from '../../lib';\n/**\n * A placeholder segment can be inline.\n */\n\nfunction SegmentInline(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content;\n  var classes = cx('inline', className);\n  var rest = getUnhandledProps(SegmentInline, props);\n  var ElementType = getElementType(SegmentInline, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nSegmentInline.handledProps = [\"as\", \"children\", \"className\", \"content\"];\nSegmentInline.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand\n} : {};\nexport default SegmentInline;","import _extends from \"@babel/runtime/helpers/extends\";\nimport _without from \"lodash/without\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly, useKeyOrValueAndKey, useTextAlignProp, useValueAndKey } from '../../lib';\nimport SegmentGroup from './SegmentGroup';\nimport SegmentInline from './SegmentInline';\n/**\n * A segment is used to create a grouping of related content.\n */\n\nfunction Segment(props) {\n  var attached = props.attached,\n      basic = props.basic,\n      children = props.children,\n      circular = props.circular,\n      className = props.className,\n      clearing = props.clearing,\n      color = props.color,\n      compact = props.compact,\n      content = props.content,\n      disabled = props.disabled,\n      floated = props.floated,\n      inverted = props.inverted,\n      loading = props.loading,\n      placeholder = props.placeholder,\n      padded = props.padded,\n      piled = props.piled,\n      raised = props.raised,\n      secondary = props.secondary,\n      size = props.size,\n      stacked = props.stacked,\n      tertiary = props.tertiary,\n      textAlign = props.textAlign,\n      vertical = props.vertical;\n  var classes = cx('ui', color, size, useKeyOnly(basic, 'basic'), useKeyOnly(circular, 'circular'), useKeyOnly(clearing, 'clearing'), useKeyOnly(compact, 'compact'), useKeyOnly(disabled, 'disabled'), useKeyOnly(inverted, 'inverted'), useKeyOnly(loading, 'loading'), useKeyOnly(placeholder, 'placeholder'), useKeyOnly(piled, 'piled'), useKeyOnly(raised, 'raised'), useKeyOnly(secondary, 'secondary'), useKeyOnly(stacked, 'stacked'), useKeyOnly(tertiary, 'tertiary'), useKeyOnly(vertical, 'vertical'), useKeyOrValueAndKey(attached, 'attached'), useKeyOrValueAndKey(padded, 'padded'), useTextAlignProp(textAlign), useValueAndKey(floated, 'floated'), 'segment', className);\n  var rest = getUnhandledProps(Segment, props);\n  var ElementType = getElementType(Segment, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nSegment.handledProps = [\"as\", \"attached\", \"basic\", \"children\", \"circular\", \"className\", \"clearing\", \"color\", \"compact\", \"content\", \"disabled\", \"floated\", \"inverted\", \"loading\", \"padded\", \"piled\", \"placeholder\", \"raised\", \"secondary\", \"size\", \"stacked\", \"tertiary\", \"textAlign\", \"vertical\"];\nSegment.Group = SegmentGroup;\nSegment.Inline = SegmentInline;\nSegment.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** Attach segment to other content, like a header. */\n  attached: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['top', 'bottom'])]),\n\n  /** A basic segment has no special formatting. */\n  basic: PropTypes.bool,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** A segment can be circular. */\n  circular: PropTypes.bool,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** A segment can clear floated content. */\n  clearing: PropTypes.bool,\n\n  /** Segment can be colored. */\n  color: PropTypes.oneOf(SUI.COLORS),\n\n  /** A segment may take up only as much space as is necessary. */\n  compact: PropTypes.bool,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** A segment may show its content is disabled. */\n  disabled: PropTypes.bool,\n\n  /** Segment content can be floated to the left or right. */\n  floated: PropTypes.oneOf(SUI.FLOATS),\n\n  /** A segment can have its colors inverted for contrast. */\n  inverted: PropTypes.bool,\n\n  /** A segment may show its content is being loaded. */\n  loading: PropTypes.bool,\n\n  /** A segment can increase its padding. */\n  padded: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['very'])]),\n\n  /** A segment can be used to reserve space for conditionally displayed content. */\n  placeholder: PropTypes.bool,\n\n  /** Formatted to look like a pile of pages. */\n  piled: PropTypes.bool,\n\n  /** A segment may be formatted to raise above the page. */\n  raised: PropTypes.bool,\n\n  /** A segment can be formatted to appear less noticeable. */\n  secondary: PropTypes.bool,\n\n  /** A segment can have different sizes. */\n  size: PropTypes.oneOf(_without(SUI.SIZES, 'medium')),\n\n  /** Formatted to show it contains multiple pages. */\n  stacked: PropTypes.bool,\n\n  /** A segment can be formatted to appear even less noticeable. */\n  tertiary: PropTypes.bool,\n\n  /** Formats content to be aligned as part of a vertical group. */\n  textAlign: PropTypes.oneOf(_without(SUI.TEXT_ALIGNMENTS, 'justified')),\n\n  /** Formats content to be aligned vertically. */\n  vertical: PropTypes.bool\n} : {};\nexport default Segment;","import _extends from \"@babel/runtime/helpers/extends\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { customPropTypes, createShorthandFactory, getElementType, getUnhandledProps, SUI, useKeyOnly, useMultipleProp, useTextAlignProp, useValueAndKey, useVerticalAlignProp, useWidthProp } from '../../lib';\n/**\n * A column sub-component for Grid.\n */\n\nfunction GridColumn(props) {\n  var children = props.children,\n      className = props.className,\n      computer = props.computer,\n      color = props.color,\n      floated = props.floated,\n      largeScreen = props.largeScreen,\n      mobile = props.mobile,\n      only = props.only,\n      stretched = props.stretched,\n      tablet = props.tablet,\n      textAlign = props.textAlign,\n      verticalAlign = props.verticalAlign,\n      widescreen = props.widescreen,\n      width = props.width;\n  var classes = cx(color, useKeyOnly(stretched, 'stretched'), useMultipleProp(only, 'only'), useTextAlignProp(textAlign), useValueAndKey(floated, 'floated'), useVerticalAlignProp(verticalAlign), useWidthProp(computer, 'wide computer'), useWidthProp(largeScreen, 'wide large screen'), useWidthProp(mobile, 'wide mobile'), useWidthProp(tablet, 'wide tablet'), useWidthProp(widescreen, 'wide widescreen'), useWidthProp(width, 'wide'), 'column', className);\n  var rest = getUnhandledProps(GridColumn, props);\n  var ElementType = getElementType(GridColumn, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), children);\n}\n\nGridColumn.handledProps = [\"as\", \"children\", \"className\", \"color\", \"computer\", \"floated\", \"largeScreen\", \"mobile\", \"only\", \"stretched\", \"tablet\", \"textAlign\", \"verticalAlign\", \"widescreen\", \"width\"];\nGridColumn.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** A grid column can be colored. */\n  color: PropTypes.oneOf(SUI.COLORS),\n\n  /** A column can specify a width for a computer. */\n  computer: customPropTypes.every([customPropTypes.disallow(['width']), PropTypes.oneOf(SUI.WIDTHS)]),\n\n  /** A column can sit flush against the left or right edge of a row. */\n  floated: PropTypes.oneOf(SUI.FLOATS),\n\n  /** A column can specify a width for a large screen device. */\n  largeScreen: customPropTypes.every([customPropTypes.disallow(['width']), PropTypes.oneOf(SUI.WIDTHS)]),\n\n  /** A column can specify a width for a mobile device. */\n  mobile: customPropTypes.every([customPropTypes.disallow(['width']), PropTypes.oneOf(SUI.WIDTHS)]),\n\n  /** A column can appear only for a specific device, or screen sizes. */\n  only: customPropTypes.multipleProp(SUI.VISIBILITY),\n\n  /** A column can stretch its contents to take up the entire grid or row height. */\n  stretched: PropTypes.bool,\n\n  /** A column can specify a width for a tablet device. */\n  tablet: customPropTypes.every([customPropTypes.disallow(['width']), PropTypes.oneOf(SUI.WIDTHS)]),\n\n  /** A column can specify its text alignment. */\n  textAlign: PropTypes.oneOf(SUI.TEXT_ALIGNMENTS),\n\n  /** A column can specify its vertical alignment to have all its columns vertically centered. */\n  verticalAlign: PropTypes.oneOf(SUI.VERTICAL_ALIGNMENTS),\n\n  /** A column can specify a width for a wide screen device. */\n  widescreen: customPropTypes.every([customPropTypes.disallow(['width']), PropTypes.oneOf(SUI.WIDTHS)]),\n\n  /** Represents width of column. */\n  width: customPropTypes.every([customPropTypes.disallow(['computer', 'largeScreen', 'mobile', 'tablet', 'widescreen']), PropTypes.oneOf(SUI.WIDTHS)])\n} : {};\nGridColumn.create = createShorthandFactory(GridColumn, function (children) {\n  return {\n    children: children\n  };\n});\nexport default GridColumn;","import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly, useMultipleProp, useTextAlignProp, useVerticalAlignProp, useWidthProp } from '../../lib';\n/**\n * A row sub-component for Grid.\n */\n\nfunction GridRow(props) {\n  var centered = props.centered,\n      children = props.children,\n      className = props.className,\n      color = props.color,\n      columns = props.columns,\n      divided = props.divided,\n      only = props.only,\n      reversed = props.reversed,\n      stretched = props.stretched,\n      textAlign = props.textAlign,\n      verticalAlign = props.verticalAlign;\n  var classes = cx(color, useKeyOnly(centered, 'centered'), useKeyOnly(divided, 'divided'), useKeyOnly(stretched, 'stretched'), useMultipleProp(only, 'only'), useMultipleProp(reversed, 'reversed'), useTextAlignProp(textAlign), useVerticalAlignProp(verticalAlign), useWidthProp(columns, 'column', true), 'row', className);\n  var rest = getUnhandledProps(GridRow, props);\n  var ElementType = getElementType(GridRow, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), children);\n}\n\nGridRow.handledProps = [\"as\", \"centered\", \"children\", \"className\", \"color\", \"columns\", \"divided\", \"only\", \"reversed\", \"stretched\", \"textAlign\", \"verticalAlign\"];\nGridRow.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** A row can have its columns centered. */\n  centered: PropTypes.bool,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** A grid row can be colored. */\n  color: PropTypes.oneOf(SUI.COLORS),\n\n  /** Represents column count per line in Row. */\n  columns: PropTypes.oneOf(_toConsumableArray(SUI.WIDTHS).concat(['equal'])),\n\n  /** A row can have dividers between its columns. */\n  divided: PropTypes.bool,\n\n  /** A row can appear only for a specific device, or screen sizes. */\n  only: customPropTypes.multipleProp(SUI.VISIBILITY),\n\n  /** A row can specify that its columns should reverse order at different device sizes. */\n  reversed: customPropTypes.multipleProp(['computer', 'computer vertically', 'mobile', 'mobile vertically', 'tablet', 'tablet vertically']),\n\n  /** A row can stretch its contents to take up the entire column height. */\n  stretched: PropTypes.bool,\n\n  /** A row can specify its text alignment. */\n  textAlign: PropTypes.oneOf(SUI.TEXT_ALIGNMENTS),\n\n  /** A row can specify its vertical alignment to have all its columns vertically centered. */\n  verticalAlign: PropTypes.oneOf(SUI.VERTICAL_ALIGNMENTS)\n} : {};\nexport default GridRow;","import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly, useKeyOrValueAndKey, useMultipleProp, useTextAlignProp, useVerticalAlignProp, useWidthProp } from '../../lib';\nimport GridColumn from './GridColumn';\nimport GridRow from './GridRow';\n/**\n * A grid is used to harmonize negative space in a layout.\n */\n\nfunction Grid(props) {\n  var celled = props.celled,\n      centered = props.centered,\n      children = props.children,\n      className = props.className,\n      columns = props.columns,\n      container = props.container,\n      divided = props.divided,\n      doubling = props.doubling,\n      inverted = props.inverted,\n      padded = props.padded,\n      relaxed = props.relaxed,\n      reversed = props.reversed,\n      stackable = props.stackable,\n      stretched = props.stretched,\n      textAlign = props.textAlign,\n      verticalAlign = props.verticalAlign;\n  var classes = cx('ui', useKeyOnly(centered, 'centered'), useKeyOnly(container, 'container'), useKeyOnly(doubling, 'doubling'), useKeyOnly(inverted, 'inverted'), useKeyOnly(stackable, 'stackable'), useKeyOnly(stretched, 'stretched'), useKeyOrValueAndKey(celled, 'celled'), useKeyOrValueAndKey(divided, 'divided'), useKeyOrValueAndKey(padded, 'padded'), useKeyOrValueAndKey(relaxed, 'relaxed'), useMultipleProp(reversed, 'reversed'), useTextAlignProp(textAlign), useVerticalAlignProp(verticalAlign), useWidthProp(columns, 'column', true), 'grid', className);\n  var rest = getUnhandledProps(Grid, props);\n  var ElementType = getElementType(Grid, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), children);\n}\n\nGrid.handledProps = [\"as\", \"celled\", \"centered\", \"children\", \"className\", \"columns\", \"container\", \"divided\", \"doubling\", \"inverted\", \"padded\", \"relaxed\", \"reversed\", \"stackable\", \"stretched\", \"textAlign\", \"verticalAlign\"];\nGrid.Column = GridColumn;\nGrid.Row = GridRow;\nGrid.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** A grid can have rows divided into cells. */\n  celled: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['internally'])]),\n\n  /** A grid can have its columns centered. */\n  centered: PropTypes.bool,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Represents column count per row in Grid. */\n  columns: PropTypes.oneOf(_toConsumableArray(SUI.WIDTHS).concat(['equal'])),\n\n  /** A grid can be combined with a container to use the available layout and alignment. */\n  container: PropTypes.bool,\n\n  /** A grid can have dividers between its columns. */\n  divided: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['vertically'])]),\n\n  /** A grid can double its column width on tablet and mobile sizes. */\n  doubling: PropTypes.bool,\n\n  /** A grid's colors can be inverted. */\n  inverted: PropTypes.bool,\n\n  /** A grid can preserve its vertical and horizontal gutters on first and last columns. */\n  padded: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['horizontally', 'vertically'])]),\n\n  /** A grid can increase its gutters to allow for more negative space. */\n  relaxed: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['very'])]),\n\n  /** A grid can specify that its columns should reverse order at different device sizes. */\n  reversed: customPropTypes.multipleProp(['computer', 'computer vertically', 'mobile', 'mobile vertically', 'tablet', 'tablet vertically']),\n\n  /** A grid can have its columns stack on-top of each other after reaching mobile breakpoints. */\n  stackable: PropTypes.bool,\n\n  /** A grid can stretch its contents to take up the entire grid height. */\n  stretched: PropTypes.bool,\n\n  /** A grid can specify its text alignment. */\n  textAlign: PropTypes.oneOf(SUI.TEXT_ALIGNMENTS),\n\n  /** A grid can specify its vertical alignment to have all its columns vertically centered. */\n  verticalAlign: PropTypes.oneOf(SUI.VERTICAL_ALIGNMENTS)\n} : {};\nexport default Grid;","import _extends from \"@babel/runtime/helpers/extends\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, useKeyOnly } from '../../lib';\n/**\n * A divider visually segments content into groups.\n */\n\nfunction Divider(props) {\n  var children = props.children,\n      className = props.className,\n      clearing = props.clearing,\n      content = props.content,\n      fitted = props.fitted,\n      hidden = props.hidden,\n      horizontal = props.horizontal,\n      inverted = props.inverted,\n      section = props.section,\n      vertical = props.vertical;\n  var classes = cx('ui', useKeyOnly(clearing, 'clearing'), useKeyOnly(fitted, 'fitted'), useKeyOnly(hidden, 'hidden'), useKeyOnly(horizontal, 'horizontal'), useKeyOnly(inverted, 'inverted'), useKeyOnly(section, 'section'), useKeyOnly(vertical, 'vertical'), 'divider', className);\n  var rest = getUnhandledProps(Divider, props);\n  var ElementType = getElementType(Divider, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nDivider.handledProps = [\"as\", \"children\", \"className\", \"clearing\", \"content\", \"fitted\", \"hidden\", \"horizontal\", \"inverted\", \"section\", \"vertical\"];\nDivider.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Divider can clear the content above it. */\n  clearing: PropTypes.bool,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** Divider can be fitted without any space above or below it. */\n  fitted: PropTypes.bool,\n\n  /** Divider can divide content without creating a dividing line. */\n  hidden: PropTypes.bool,\n\n  /** Divider can segment content horizontally. */\n  horizontal: PropTypes.bool,\n\n  /** Divider can have its colours inverted. */\n  inverted: PropTypes.bool,\n\n  /** Divider can provide greater margins to divide sections of content. */\n  section: PropTypes.bool,\n\n  /** Divider can segment content vertically. */\n  vertical: PropTypes.bool\n} : {};\nexport default Divider;","import React from \"react\";\nimport { Divider, Grid, Header, Image, Segment } from \"semantic-ui-react\";\n\nconst About = () => {\n  return (\n    <Segment id=\"about\">\n      <Grid\n        columns={2}\n        verticalAlign=\"middle\"\n        textAlign=\"center\"\n        padded\n        stackable\n        fluid=\"true\"\n      >\n        <Grid.Column width={6}>\n          <Image src=\"https://i.imgur.com/4Y3dLBk.png\" fluid />\n        </Grid.Column>\n        <Grid.Column width={10}>\n          <Divider horizontal>\n            <Header className=\"about-header\">Background</Header>\n          </Divider>\n          <p>\n            Born and raised in Orange County, California, I always had a passion\n            for the arts since childhood. In college, I channeled my creative\n            spirit into a more practical application: fashion design.\n            <br /> As much as I adored fashion, I found a passion and love for\n            programming. The process in software engineering is extremely\n            similar to garment creation in fashion!\n          </p>\n          <Divider horizontal>\n            <Header className=\"about-header\">Skills</Header>\n          </Divider>\n          <p>\n            React, Redux, JavaScript, Ruby on Rails, PHP, CMS (Wordpress,\n            Shopify)\n            <br />\n            CSS, HTML, Illustrator, Photoshop, PostgreSQL, AWS S3\n          </p>\n          <Divider horizontal>\n            <Header className=\"about-header\">Education</Header>\n          </Divider>\n          <ul>\n            <li>\n              <ul>\n                <h5 className=\"school\">Flatiron School </h5>\n                January - April 2019\n                <li>Brooklyn, NY</li>\n                <li>Immersive 15 weeks program full stack development</li>\n              </ul>\n            </li>\n            <br />\n            <li>\n              <ul>\n                <h5 className=\"school\">\n                  California State University Long Beach\n                </h5>\n                2015-2018\n                <li>Long Beach, CA</li>\n                <li>B.A. in Fashion Design</li>\n              </ul>\n            </li>\n          </ul>\n        </Grid.Column>\n      </Grid>\n    </Segment>\n  );\n};\nexport default About;\n"],"sourceRoot":""}